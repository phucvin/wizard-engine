// Copyright 2023 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An iterator for basic blocks in a function.
class BasicBlockIterator {
	def var func: FuncDecl;				// function
	def var pc: int;				// start of current block
	private def bi = BytecodeIterator.new();	// {bi.pc} = end of current block

	// Reset this iterator for the new function.
	def reset(func: FuncDecl) -> this {
		bi.reset(this.func = func);
		bi.current();
		next();
	}
	// Returns a range of bytecode offsets [start ... end) representing the current basic block.
	// Returns [end ... end) after blocks are exhausted.
	def current() -> (int, int) {
		return (pc, bi.pc);
	}
	// Returns {true} if there are more basic blocks remaining.
	def more() -> bool {
		return bi.pc > pc || bi.more();
	}
	// Advances to the next basic block.
	def next() -> this {
		pc = bi.pc;
		var end_pc = bi.pc;
		while (bi.more()) {
			match (bi.current()) {
				LOOP => {
					// End the previous block, if there was one.
					if (end_pc != bi.pc) return;
				}
				END => {
					// TODO: track whether ends are branched to using a control stack.
					// If this end has a branch to it, end the previous block, if there was one.
					if (end_pc != bi.pc) return;
				}
				// Bytecodes that end the current block after this instruction.
				IF,
				ELSE,
				CATCH,
				CATCH_ALL,
				THROW,
				RETHROW,
				RETURN,
				UNREACHABLE,
				BR,
				BR_TABLE,
				BR_IF,
				BR_ON_CAST,
				BR_ON_CAST_FAIL,
				BR_ON_NULL,
				BR_ON_NON_NULL => {
					// End the current block after this instruction.
					return void(bi.next());
				}
				_ => ;
			}
			bi.next();
		}
		// fell off the end, no more blocks.
		pc = bi.pc;
	}
}
