// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def unused_ = HostModuleBuilderOf<WaliInstance>.new("wali", WaliInstance.new)
	.func_M("SYS_read", SigCache.iii_l, WaliInstance.read)
	.func_M("SYS_write", SigCache.iii_l, WaliInstance.write)
	.func_M("SYS_open", SigCache.iii_l, WaliInstance.open)
	.func_M("SYS_close", SigCache.i_l, WaliInstance.close)
	.func_M("SYS_stat", SigCache.ii_l, WaliInstance.stat)
	.func_M("SYS_lseek", SigCache.ili_l, WaliInstance.lseek)
	.func_M("SYS_exit", SigCache.i_l, WaliInstance.exit)
	.func_M("SYS_exit_group", SigCache.i_l, WaliInstance.exit_group)
	.func_M("__cl_get_argc", SigCache.v_i, WaliInstance.cl_get_argc)
	.func_M("__cl_get_argv_len", SigCache.i_i, WaliInstance.cl_get_argv_len)
	.func_M("__cl_copy_argv", SigCache.ii_i, WaliInstance.cl_copy_argv)
	.postprocess(WaliInstance.setMemory)
	.init(init)
	.getMain(getMain)
	.register(false);

class WaliInstance {
	private var memory: Memory;
	private def fdmap = FileDescriptorMap.new(MAX_FDS); // per-instance: fd table
	// TODO: per-instance memory mappings

	def setMemory(error: ErrorGen, instance: Instance) {
		// Find memory and save internally
		memory = instance.findExportOfType<Memory>(null);
	}

	def getSysFd(args: Range<Value>, n: int) -> int {
		return fdmap.get(Values.unbox_i(args[n]));
	}
	def getRegion(args: Range<Value>, n: int) -> MaybeTrap<Range<byte>> {
		var ptr = Values.unbox_u(args[n]);
		var len = Values.unbox_u(args[n+1]);
		return memory.range_ol_32(ptr, len);
	}
	def getRegionOf(args: Range<Value>, n: int, len: u32) -> MaybeTrap<Range<byte>> {
		var ptr = Values.unbox_u(args[n]);
		return memory.range_ol_32(ptr, len);
	}
	def getPath(args: Range<Value>, n: int) -> MaybeTrap<Range<byte>> {
		var ptr = Values.unbox_u(args[n]);
		return memory.range_o_32z(ptr, u32.!(LinuxConst.MAXPATHLEN));
	}
	def syscall<T>(num: int, args: T) -> HostResult.Value1 {
		var r = Linux.syscall(num, args);
		return HostResult.Value1(Values.box_l(r.0));
	}

	//========================================================================================
	// Exported functions.
	//========================================================================================
	def read(args: Range<Value>) -> HostResult {
		var sysfd = getSysFd(args, 0);
		var range = getRegion(args, 1);
		if (range.reason != TrapReason.NONE) return range.toHostResultThrow();
		if (sysfd < 0) return EBADFD;
		return syscall(LinuxConst.SYS_read, (sysfd, Pointer.atContents(range.result), range.result.length));
	}
	def write(args: Range<Value>) -> HostResult {
		var sysfd = getSysFd(args, 0);
		var range = getRegion(args, 1);
		if (range.reason != TrapReason.NONE) return range.toHostResultThrow();
		if (sysfd < 0) return EBADFD;
		return syscall(LinuxConst.SYS_write, (sysfd, Pointer.atContents(range.result), range.result.length));
	}
	def open(args: Range<Value>) -> HostResult {
		var path = getPath(args, 0);
		var arg1 = Values.unbox_u(args[1]);
		var arg2 = Values.unbox_u(args[2]);
		if (path.reason != TrapReason.NONE) return path.toHostResultThrow();
		var r = Linux.syscall(LinuxConst.SYS_open, (Pointer.atContents(path.result), arg1, arg2));
		if (r.0 < 0) return HostResult.Value1(Values.box_l(r.0));
		var fd = fdmap.alloc();
		fdmap.set(fd, int.!(r.0));
		return HostResult.Value1(Values.box_l(fd));
	}
	def lseek(args: Range<Value>) -> HostResult {
		var fd = Values.unbox_i(args[0]);
		var sysfd = fdmap.get(fd);
		if (sysfd < 0) return EBADFD;
		var offset = Values.unbox_l(args[1]);
		var mode = Values.unbox_i(args[2]);
		return syscall(LinuxConst.SYS_lseek, (sysfd, offset, mode));
	}
	def close(args: Range<Value>) -> HostResult {
		var fd = Values.unbox_i(args[0]);
		var sysfd = fdmap.get(fd);
		if (sysfd < 0) return EBADFD;
		var r = Linux.syscall(LinuxConst.SYS_close, (sysfd));
		fdmap.free(fd);
		return HostResult.Value1(Values.box_l(r.0));
	}
	def stat(args: Range<Value>) -> HostResult {
		var path = getPath(args, 0);
		if (path.reason != TrapReason.NONE) return path.toHostResultThrow();
		var range = getRegionOf(args, 1, u32.!(wali_stat.size));
		if (range.reason != TrapReason.NONE) return path.toHostResultThrow();
//		var incoming = Ref<wali_stat>.of(range.val);
		var r = Linux.syscall(LinuxConst.SYS_stat, (Pointer.atContents(path.result), Pointer.atContents(range.result)));
		// TODO: layout adjustment for minor stat buffer changes
		return HostResult.Value1(Values.box_l(r.0));
	}
	def exit(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Exit.new(Values.unbox_u(args[0])));
	}
	def exit_group(args: Range<Value>) -> HostResult {
		return HostResult.Throw(Exit.new(Values.unbox_u(args[0])));
	}
	def cl_get_argc(args: Range<Value>) -> HostResult {
		var count = if(cmdline_args != null, cmdline_args.length);
		return HostResult.Value1(Values.box_i(count));
	}
	def cl_get_argv_len(args: Range<Value>) -> HostResult {
		var index = Values.unbox_u(args[0]);
		if (cmdline_args == null || index >= cmdline_args.length) return ZERO;
		var str = cmdline_args[index];
		return HostResult.Value1(Values.box_i(str.length));
	}
	def cl_copy_argv(args: Range<Value>) -> HostResult {
		var index = Values.unbox_u(args[1]);
		if (cmdline_args == null || index >= cmdline_args.length) return ZERO;
		var str = cmdline_args[index];
		var reason = memory.copyIn(Values.unbox_u(args[0]), str, 0, u32.!(str.length));
		if (reason != TrapReason.NONE) return HostResult.Throw(Trap.new(reason, null, null));
		return HostResult.Value1(Values.box_i(str.length));
	}
}

def MAX_FDS = 1000;
var cmdline_args: Array<string>; // global: environment
var cmdline_env: Array<string>; // global: environment, TODO
var trace: bool;

def ZERO = HostResult.Value1(Values.I32_0);
def EBADFD = HostResult.Value1(Values.box_i(LinuxConst.EBADFD));

def init(args: Array<string>, t: bool, err: ErrorGen) {
	cmdline_args = args;
	trace = t;
}

def getMain(instance: Instance) -> (Function, Array<Value>) {
	var main = instance.findExportOfType<Function>(GlobMatcher.new("main"));
	if (main == null) {
		for (iex in instance.exports) {
			match (iex) {
				x: Function => {
					// If more than one exported function, don't know
					if (main != null) return (null, null);
					main = x;
				}
			}
		}
	}
	if (main == null) return (null, null);
	if (Arrays.equal(main.sig.params, SigCache.arr_i)) return (main, [Values.box_i(cmdline_args.length)]);
	return (main, Arrays.map(main.sig.params, Values.default));
}

def MINUS_1 = HostResult.Value1(Value.I64(0xFFFFFFFF_FFFFFFFFuL));


layout WaliStruct_stat { // TODO
	=0;
}
