// Copyright 2023 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
component WasiPathUtil {
	def normalize_path = normalize_path0;
	def resolve_path = resolve_path0;

}

// Flag bit to indicate that symlink resolution should follow the link.
def LOOKUP_SYMLINK_FOLLOW = 1;

def SYS_readlink = 0x59;

// Maximum allowed path length.
def PATH_MAX = 4096;

def EINVAL = 22;
def ENOENT = 2;

// Checks if a given path is absolute by looking for a leading slash.
def is_absolute_path(path: string) -> bool {
	return (path.length > 0) && (path[0] == '/');
}

// Function to find the first occurrence of a slash in a string
def find_next_slash(s: string, start_pt: i32) -> int {
	var i = start_pt;
	while (i < s.length) {
		var currentChar = s[i];
		if (currentChar == 0) {// Equivalent to checking for null termination in C
			return -1;
		}
		if (currentChar == '/') {
			return i;
		}
		i += 1;
	}
	return -1;
}

// Internal function to normalize paths by removing redundant segments.
def normalize_path0(path: string) -> (string) {
	var cur = 0;
	var normalized = StringBuilder.new();
	var nextSlash = 0;
	var last = 0;
	var isAbsPath = is_absolute_path(path);

	for (cur = 0; cur < path.length; cur = nextSlash + 1) {
		nextSlash = find_next_slash(path, cur);
		var curSegmentLength = if (nextSlash == -1, path.length - cur, nextSlash - cur);
		if (curSegmentLength == 0) {
			if (normalized.length == 0 && nextSlash != -1 && isAbsPath) {
				normalized.putc('/');
			}
		} else if (curSegmentLength == 1 && path[cur] == '.') {
			/* No-op. Just consume the '.' */
		} else if (curSegmentLength == 2 && path[cur] == '.' && path[cur + 1] == '.') {

			var tmpResult = normalized.toString();
			normalized = StringBuilder.new();
			last = tmpResult.length - 1;
			var tmpLen = tmpResult.length;
			while (last >= 0) {
				var lastC = tmpResult[last];
				if (lastC == '/'){
					break;
				}
				last -= 1;
			}
			var i = 0;
			
			/* If the result is currently empty, or the last prior path is also '..'
			 then output '..'. Otherwise, remove the last path segment. */
			if (tmpLen == 0) {
				normalized.puts("..");
			} else if ((last == tmpLen - 3 || last == tmpLen - 4 && tmpResult[tmpLen - 3] == '/') && tmpResult[tmpLen - 2] == '.' &&
								 tmpResult[tmpLen - 1] == '.') {
				normalized.puts(tmpResult);
				normalized.puts("/..");
			} else {
				/* Strip the last segment, but make sure not to strip the '/' if that
					 is the entire path. */
				if (last == 0 && tmpResult[last] == '/') {
					last++;
				}
				normalized = StringBuilder.new();
				var i = 0;
				for (i = 0; i < last; i++) {
					normalized.putc(tmpResult[i]);// not good here
				}
			}
		} else {
			if (normalized.length > 0){
				var normalizedStr = normalized.toString();
				if (normalizedStr[normalizedStr.length - 1] != '/' ){
					normalized = StringBuilder.new();
					normalized.puts(normalizedStr);
					normalized.putc('/');
				}else if(normalizedStr.length == 1 && isAbsPath){
					normalized = StringBuilder.new();
					normalized.putc('/');
				}
			}
			var i = cur;
			for (i = cur; i < cur + curSegmentLength; i++) {
				normalized.putc(path[i]);
			}
		}

		if (nextSlash < 0) {
			break;
		}
	}

	/* Normalized the path is the empty string. Return either '/' or '.'. */
	if (normalized.length == 0) {
		if (isAbsPath) {
			normalized.putc('/');
		} else {
			normalized.putc('.');
		}
	}
        
	var len = normalized.length;
	return normalized.toString();
}

// Checks if an absolute path remains within the sandboxed environment defined by fd_path.
def is_abspath_sandboxed(abspath: string, fd_path: string) -> bool {
	var abspath_len = abspath.length;
	var fd_path_len = fd_path.length;
	if (is_absolute_path(fd_path)) {
		if (abspath_len < fd_path_len) {
			return false;
		}
		var i = 0;
		for (i = 0; i < fd_path_len; i++) {
			if (abspath[i] != fd_path[i]) {
				return false;
			}
		}
		return true;
	}
	/* Handle relative fds that normalized to '.' */
	if (fd_path_len == 1 && fd_path[0] == '.') {
		/* If the fd's path is '.', then any path does not begin with '..' is OK. */
		if ((abspath_len == 2 && abspath[0] == '.' && abspath[1] == '.') ||
			(abspath_len > 2 && abspath[0] == '.' && abspath[1] == '.' && abspath[2] == '/')) {
			return false;
			}
		return true;
	}

	return true;

}

// Normalizes an absolute path and checks if it stays within the sandbox.
def normalize_abspath(abspath: string, fd_path: string) -> (string, WspOneErrno) {
	var normalized = normalize_path0(abspath);
	if (!is_abspath_sandboxed(normalized, fd_path)) {
		return (normalized, WspOneErrno.NOTCAPABLE);
	}
	return (normalized, WspOneErrno.SUCCESS);
}

// Normalizes a relative path by combining it with fd_path and checking if it stays within the sandbox.
def normalize_relative_path(path: string, fd_path: string) -> (string, WspOneErrno) {
	var combined = StringBuilder.new();
	combined.puts(fd_path);
	combined.putc('/');
	combined.puts(path);
	var combinedStr = combined.toString();
	
	var normalized = normalize_path0(combinedStr);
	
	if (!is_abspath_sandboxed(normalized, fd_path)) {
		return (normalized, WspOneErrno.NOTCAPABLE);
	}
	return (normalized, WspOneErrno.SUCCESS);
}

// Resolves a path without following symlinks, ensuring it stays within the sandbox.
def resolve_path_without_link(fdinfo: WasiFd, path: string) -> (string, WspOneErrno) {
	var fd_path = fdinfo.path;
	var normalized : string;
	if (is_absolute_path(path)) {
		var result = normalize_abspath(path, fd_path);
		if (result.1 != WspOneErrno.SUCCESS) {
			return result;
		}
		normalized = result.0;
	} else {
		var result = normalize_relative_path(path, fd_path);
		if (result.1 != WspOneErrno.SUCCESS) {
			return result;
		}
		normalized = result.0;
	}
	return (normalized, WspOneErrno.SUCCESS);

}

// Main function to resolve a path with an option to follow symlinks, ensuring it stays within the sandbox.
def resolve_path0(fdinfo: WasiFd, path: string, flags: i32) -> (string, int) {
	var result = resolve_path_without_link(fdinfo, path);
	if (result.1 != WspOneErrno.SUCCESS) {
		return (result.0, result.1.code);
	}
	var normalized = result.0;
	
	if ((flags & LOOKUP_SYMLINK_FOLLOW) == LOOKUP_SYMLINK_FOLLOW) {

		var buffer = string.new(PATH_MAX);
		var len = PATH_MAX;
		var t = Linux.syscall(SYS_readlink, (normalized, Pointer.atContents(buffer), len));
		if (t.0 < 0 && t.0 != -EINVAL && t.0 != -ENOENT) {
			return (normalized, int.!(t.0));
		}
		var readlink_len = t.0;
		// If the path is a symlink, return it
		return (buffer, 0);

	}
	return (normalized, 0);
}
