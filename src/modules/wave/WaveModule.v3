// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The "wave" module provides an execution environment for Virgil programs compiled to Wasm.
def Y_ = HostModuleBuilderOf<WaveInstance>.new("wave", WaveInstance.new)
	.func_M("arg_len", SigCache.i_i, WaveInstance.arg_len)
	.func_M("arg_copy", SigCache.iii_i, WaveInstance.arg_copy)
	.func_M("fs_size", SigCache.ii_i, WaveInstance.fs_size)
	.func_M("fs_chmod", SigCache.iii_i, WaveInstance.fs_chmod)
	.func_M("fs_open", SigCache.iii_i, WaveInstance.fs_open)
	.func_M("fs_read", SigCache.iii_i, WaveInstance.fs_read)
	.func_M("fs_write", SigCache.iii_i, WaveInstance.fs_write)
	.func_M("fs_avail", SigCache.i_i, WaveInstance.fs_avail)
	.func_M("fs_close", SigCache.i_v, WaveInstance.fs_close)
	.func_M("ticks_ms", SigCache.v_i, WaveInstance.ticks_ms)
	.func_M("ticks_us", SigCache.v_i, WaveInstance.ticks_us)
	.func_M("ticks_ns", SigCache.v_i, WaveInstance.ticks_ns)
	.func_M("throw_ex", SigCache.iiii_v, WaveInstance.throw_ex)
	.postprocess(WaveInstance.setMemory)
	.init(init)
	.getMain(getMain)
	.register(true); // TODO: don't expose wave by default

// Global state. TODO: should be part of {WaveInstance}.
var fdmap: FileDescriptorMap;
var cmdline_args: Array<string>;
def OOB = HostResult.Throw(Trap.new(TrapReason.MEM_OUT_OF_BOUNDS, null, null));

def init(args: Array<string>, trace: bool, err: ErrorGen) { // XXX: remove trace
	fdmap = FileDescriptorMap.new(MAX_FDS);
	cmdline_args = args;
}

def getMain(instance: Instance) -> (Function, Array<Value>) {
	var main = instance.findExportOfType<Function>(GlobMatcher.new("main"));
	if (main == null) {
		for (iex in instance.exports) {
			match (iex) {
				x: Function => {
					// If more than one exported function, don't know
					if (main != null) return (null, null);
					main = x;
				}
			}
		}
	}
	if (main == null) return (null, null);
	if (Arrays.equal(main.sig.params, SigCache.arr_i)) return (main, [Values.box_i(cmdline_args.length)]);
	return (main, Arrays.map(main.sig.params, Values.default));
}

// Implements the "wave" module interface for programs compiled from Virgil.
class WaveInstance {
	private var memory: Memory;

	def setMemory(error: ErrorGen, instance: Instance) {
		// Find memory and save internally
		memory = instance.findExportOfType<Memory>(null);
	}
	def deinit(result: Result) {
		fdmap.closeAll();
	}

	// ==={Provided functions}============================================
	def arg_len(args: Range<Value>) -> HostResult {
		var arg = Values.unbox_u(args[0]);
		if (arg >= cmdline_args.length) return MINUS_1;
		return i(cmdline_args[arg].length);
	}
	def arg_copy(args: Range<Value>) -> HostResult {
		if (memory == null) return OOB;
		var arg = Values.unbox_u(args[0]);
		var ptr = Values.unbox_u(args[1]);
		var len = Values.unbox_u(args[2]);
		if (arg >= cmdline_args.length) return MINUS_1;
		var data = cmdline_args[arg];
		if (len > data.length) len = u32.!(data.length);
		var i = memory.boundsCheck(0, ptr, len);
		if (i < 0) return OOB;
		memory.copyIn(ptr, data, 0, len);
		return this.i(int.!(len));
	}

	def fs_size(args: Range<Value>) -> HostResult {
		var path = copyString(memory, args[0], args[1]);
		if (!path.ok()) return path.toHostResultThrow();
		var fd = System.fileOpen(path.result, true);
		if (fd < 0) return i(0);
		var size = System.fileLeft(fd);
		System.fileClose(fd);
		return i(size);
	}
	def fs_chmod(args: Range<Value>) -> HostResult {
		var path = copyString(memory, args[0], args[1]);
		if (!path.ok()) return path.toHostResultThrow();
		var perm = Values.unbox_u(args[2]);
		System.chmod(path.result, int.view(perm));
		return i(0);
	}
	def fs_open(args: Range<Value>) -> HostResult {
		var path = copyString(memory, args[0], args[1]);
		if (!path.ok()) return path.toHostResultThrow();
		var mode = Values.unbox_u(args[2]);
		var fd = fdmap.alloc();
		if (fd < 0) return MINUS_1; // out of file descriptors
		var s = System.fileOpen(path.result, mode == 0);
		if (s < 0) return i(s);
		fdmap.set(fd, s);
		return i(fd);
	}
	def fs_read(args: Range<Value>) -> HostResult {
		if (memory == null) return OOB;
		var fd = Values.unbox_i(args[0]);
		var buf = Values.unbox_u(args[1]);
		var len = Values.unbox_u(args[2]);
		var s = fdmap.get(fd);
		if (s < 0) return MINUS_1;
		return i(memory.readIn(s, buf, len));
	}
	def fs_write(args: Range<Value>) -> HostResult {
		if (memory == null) return OOB;
		var fd = Values.unbox_i(args[0]);
		var buf = Values.unbox_u(args[1]);
		var len = Values.unbox_u(args[2]);
		var s = fdmap.get(fd);
		if (s < 0) return MINUS_1;
		return i(memory.writeOut(s, buf, len));
	}
	def fs_avail(args: Range<Value>) -> HostResult {
		var fd = Values.unbox_i(args[0]);
		var s = fdmap.get(fd);
		if (s < 0) return MINUS_1;
		var r = System.fileLeft(s);
		return i(r);
	}
	def fs_close(args: Range<Value>) -> HostResult {
		var fd = Values.unbox_i(args[0]);
		var s = fdmap.get(fd);
		if (s < 0) return MINUS_1;
		System.fileClose(s);
		fdmap.free(fd);
		return NONE;
	}
	def ticks_ms(args: Range<Value>) -> HostResult {
		return i(System.ticksMs());
	}
	def ticks_us(args: Range<Value>) -> HostResult {
		return i(System.ticksUs());
	}
	def ticks_ns(args: Range<Value>) -> HostResult {
		return i(System.ticksNs());
	}
	def throw_ex(args: Range<Value>) -> HostResult {
		if (memory == null) return OOB;
		var ex = Values.unbox_u(args[0]);
		var ex_len = Values.unbox_u(args[1]);
		var msg = Values.unbox_u(args[2]);
		var msg_len = Values.unbox_u(args[3]);
		var errstr = memory.extract(ex, ex_len);
		var msgstr = memory.extract(msg, msg_len);
		return HostResult.Throw(Exit.new(u32.max));
	}
	// ===================================================================
	def copyString(memory: Memory, offset: Value, size: Value) -> MaybeTrap<string> {
		if (memory == null) return MaybeTrap<string>(null, TrapReason.NO_EXPORTED_MEM);
		return memory.range_ol_32(Values.unbox_u(offset), Values.unbox_u(size)).then(Ranges.dup<byte>);
	}

	private def i(v: int) -> HostResult {
		return HostResult.Value1(Value.I32(u32.view(v)));
	}
}
def MINUS_1 = HostResult.Value1(Value.I32(0xFFFFFFFFu));
def NONE = HostResult.Value0;
def MAX_FDS = 256;
